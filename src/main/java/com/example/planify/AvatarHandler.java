package com.example.planify;

import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.WritableImage;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Circle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class AvatarHandler {

    private final Circle circleBackAvatar;
    private final User user;
    private final DatabaseHandler dbHandler;
    private final boolean isSettingsPage;

    public AvatarHandler(Circle circleBackAvatar, User user, boolean isSettingsPage) {
        this.circleBackAvatar = circleBackAvatar;
        this.user = user;
        this.dbHandler = new DatabaseHandler();
        this.isSettingsPage = isSettingsPage;
        setupEventHandlers();
        loadUserAvatar();
    }

    private void setupEventHandlers() {
        if (!isSettingsPage) return; // üí° –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ "Settings"

        circleBackAvatar.setOnMouseClicked(event -> handleAvatarClick());
        circleBackAvatar.setOnMouseEntered(event -> handleAvatarHoverEnter());
        circleBackAvatar.setOnMouseExited(event -> handleAvatarHoverExit());
    }

    private void handleAvatarClick() {
        // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Profile Picture");
        alert.setHeaderText(null);
        alert.setContentText("Do you want to change or delete your avatar?");
        alert.getDialogPane().setGraphic(null);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        ButtonType changeButton = new ButtonType("Change", ButtonType.OK.getButtonData());
        ButtonType removeButton = new ButtonType("Remove", ButtonType.OK.getButtonData());
        ButtonType cancelButton = new ButtonType("Cancel", ButtonType.CANCEL.getButtonData());
        alert.getButtonTypes().setAll(changeButton, removeButton, cancelButton);

        //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        Image icon = new Image(getClass().getResourceAsStream("/com/example/planify/images/iconQuestion.png"));
        Stage dialogStage = (Stage) alert.getDialogPane().getScene().getWindow();
        dialogStage.getIcons().add(icon);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        alert.showAndWait().ifPresent(response -> {
            if (response == changeButton) {
                // –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("Select Profile Picture");
                fileChooser.getExtensionFilters().addAll(
                        new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
                );

                File selectedFile = fileChooser.showOpenDialog(circleBackAvatar.getScene().getWindow());

                if (selectedFile != null) {
                    String fileName = selectedFile.getName().toLowerCase();
                    if (fileName.endsWith(".png") || fileName.endsWith(".jpg") || fileName.endsWith(".jpeg")) {
                        try {
                            String extension = fileName.substring(fileName.lastIndexOf('.'));
                            String newFileName = "user_" + user.getId() + extension;

                            Path userImagesDir = Paths.get(System.getProperty("user.dir"), "user_images");
                            if (!Files.exists(userImagesDir)) {
                                Files.createDirectories(userImagesDir);
                            }

                            Path destination = userImagesDir.resolve(newFileName);
                            Files.copy(selectedFile.toPath(), destination, StandardCopyOption.REPLACE_EXISTING);

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            dbHandler.updateUserAvatar(user.getId(), destination.toString());

                            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
                            setAvatarImage(destination.toUri().toString());

                            showSuccessAlert("Profile picture updated successfully!");
                        } catch (IOException e) {
                            e.printStackTrace();
                            showAlertOneButton("Failed to save the image. Please try again.");
                        }
                    } else {
                        showAlertOneButton("Please select a PNG or JPG image file.");
                    }
                }
            } else if (response == removeButton) {
                // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ)
                try {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
                    setDefaultAvatar();
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø—É—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    dbHandler.updateUserAvatar(user.getId(), "/com/example/planify/images/user.png");
                    showSuccessAlert("Profile picture has been reset to default!");
                } catch (Exception e) {
                    e.printStackTrace();
                    showAlertOneButton("Failed to reset the profile picture. Please try again.");
                }
            }
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    private void loadUserAvatar() {
        String avatarPath = dbHandler.getUserAvatar(user.getId());

        if (avatarPath != null && !avatarPath.isEmpty()) {
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä –≤ –ë–î, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            File avatarFile = new File(avatarPath);
            if (avatarFile.exists()) {
                setAvatarImage(avatarFile.toURI().toString());
                return;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        setDefaultAvatar();
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    private void setDefaultAvatar() {
        Image image = new Image(getClass().getResourceAsStream("/com/example/planify/images/user.png"));
        circleBackAvatar.setRadius(50);
        circleBackAvatar.setFill(new ImagePattern(image));
        circleBackAvatar.setStroke(javafx.scene.paint.Color.LIGHTGRAY);
        circleBackAvatar.setStrokeWidth(1);
    }

    private Image cropToSquareCenter(Image image) {
        double width = image.getWidth();
        double height = image.getHeight();
        double size = Math.min(width, height);
        double x = (width - size) / 2;
        double y = (height - size) / 2;

        return new WritableImage(image.getPixelReader(), (int) x, (int) y, (int) size, (int) size);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    private void setAvatarImage(String imageUrl) {
        Image image = new Image(imageUrl,
                0, 0,  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (0 –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                true,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                true); // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        Image croppedImage = cropToSquareCenter(image);

        // –°–æ–∑–¥–∞–µ–º ImagePattern —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ImagePattern pattern = new ImagePattern(croppedImage);

        circleBackAvatar.setRadius(50);
        circleBackAvatar.setFill(pattern);
        circleBackAvatar.setStroke(javafx.scene.paint.Color.LIGHTGRAY);
        circleBackAvatar.setStrokeWidth(1);
    }

    private void handleAvatarHoverEnter() {
        circleBackAvatar.setEffect(new DropShadow());
    }

    private void handleAvatarHoverExit() {
        circleBackAvatar.setEffect(null);
    }

    private void showAlertOneButton(String message) {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.getDialogPane().setGraphic(null);

        Image icon = new Image(getClass().getResourceAsStream("/com/example/planify/images/iconWarning.png"));
        Stage dialogStage = (Stage) alert.getDialogPane().getScene().getWindow();
        dialogStage.getIcons().add(icon);

        ButtonType cancelButtonType = new ButtonType("Close", ButtonType.CANCEL.getButtonData());
        alert.getDialogPane().getButtonTypes().setAll(cancelButtonType);

        alert.showAndWait();
    }

    private void showSuccessAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Success");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.getDialogPane().setGraphic(null);

        Image icon = new Image(getClass().getResourceAsStream("/com/example/planify/images/iconSuccess.png"));
        Stage dialogStage = (Stage) alert.getDialogPane().getScene().getWindow();
        dialogStage.getIcons().add(icon);

        ButtonType okButtonType = new ButtonType("Close", ButtonType.OK.getButtonData());
        alert.getDialogPane().getButtonTypes().setAll(okButtonType);

        alert.showAndWait();
    }
}